#!/bin/bash


export POSIXLY_CORRECT="yes"

help(){
        echo "-----------------------------------------------------------------------------------------------------------------------------------"
        echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
        echo ""
        echo "COMMAND může být jeden z:"
        echo ""
        echo "infected     — spočítá počet nakažených."
        echo "merge        — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou)."
        echo "gender       — vypíše počet nakažených pro jednotlivá pohlaví."
        echo "age          — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže)."
        echo "daily        — vypíše statistiku nakažených osob pro jednotlivé dny."
        echo "monthly      — vypíše statistiku nakažených osob pro jednotlivé měsíce."
        echo "yearly       — vypíše statistiku nakažených osob pro jednotlivé roky."
        echo "countries    — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ)."
        echo "districts    — vypíše statistiku nakažených osob pro jednotlivé okresy."
        echo "regions      — vypíše statistiku nakažených osob pro jednotlivé kraje."
        echo ""
        echo "FILTERS může být kombinace následujících (každý maximálně jednou): "
        echo ""
        echo "-a DATETIME  — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD."
        echo "-b DATETIME  — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)."
        echo "-g GENDER    — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy)."
        echo "-s           - vypisuje data ne číselně, ale graficky v podobě histogramů."
        echo ""
        echo "-h           — vypíše nápovědu s krátkým popisem každého příkazu a přepínače."
        echo "-----------------------------------------------------------------------------------------------------------------------------------"
        exit 0
}


ARG=":"
GENDER=""
DATETIME_AFTER="0000-00-00"
DATETIME_BEFORE="9999-99-99"

while [ $# -ne 0 ]
do
        case "$1" in
                -h)
                        help
                        ;;
                -a)
                        DATETIME_AFTER="$2"
                        ;;
                -b)
                        DATETIME_BEFORE="$2"
                        ;;
                -g)
                        GENDER="$2"
                        ;;
                -s)
                        HIST=1
                        ;;
                infected | merge)
                        COMMAND="$1"
                        ;;
                gender)
                        COMMAND="$1"
                        HIST_S=100000
                        ;;
                age)
                        COMMAND="$1"
                        HIST_S=10000
                        ;;
                daily)
                        COMMAND="$1"
                        HIST_S=500
                        ;;
                monthly)
                        COMMAND="$1"
                        HIST_S=10000
                        ;;
                yearly)
                        COMMAND="$1"
                        HIST_S=100000
                        ;;
                countries)
                        COMMAND="$1"
                        HIST_S=100
                        ;;
                districts)
                        COMMAND="$1"
                        HIST_S=1000
                        ;;
                regions)
                        COMMAND="$1"
                        HIST_S=10000
                        ;;
                *.csv)
                        FILE_NAME="$1 $FILE_NAME"
                        ARG="cat $FILE_NAME"
                        ;;
                *.gz)
                        FILE_NAME="$1 $FILE_NAME"
                        ARG="gunzip -c $FILE_NAME"
                        ;;
                *.bz2)
                        FILE_NAME="$1 $FILE_NAME"
                        ARG="bunzip2 -c $FILE_NAME"
                        ;;
        esac
        shift
done



if [ "$ARG" == ":" ]
then
        ARG="cat -"
fi



FILTERS=" \
awk \
-F ',' \
-v after=\"$DATETIME_AFTER\" \
-v before=\"$DATETIME_BEFORE\" \
-v gender=\"$GENDER\" \
'
{
if (gender == \"\")
{
        if (\$2 >= after && \$2 <= before)
                print \$0;
        else if (\$2 == \"datum\")
                print \$0;
}
else
{
        if (\$2 >= after && \$2 <= before && \$4 == gender)
                print \$0;
        else if (\$2 == \"datum\" && \$4 == \"pohlavi\")
                print \$0;
}
}
' \
"

HIST_F="awk -v hist=$HIST -v size=$HIST_S '{if (hist == 1) {/[0-9]*/; printf (\"%s \", \$1); a=\$2/size; if(int(a)>0){while(int(a--) != 0) if(int(a)!=0) printf \"#\"; else printf\"#\\n\";} else printf \"\\n\"}}'"


VALID_AGE="$ARG | awk -F ',' '{if (\$3 ~ /^ *[0-9]* *$/ || \$3 == \"vek\"); else print \"Invalid age:\", \$0}'"

infected="awk -F ',' '{if (\$0 ~ /^.*,.*?,.*?,[MZ]/) {count++}} END {print count}'"

merge="cat -"

gender="awk -F ',' '{if (\$4 == \"M\") {countM++} else if (\$4 == \"Z\") {countZ++}} END {print \"M:\",countM; print \"Z:\",countZ}'"

age=" \
awk \
-F ',' \
'
{
        if (\$3 ~ /^[0-9]{0,3}$/)
                if (\$3 >= 0 && \$3 <= 5)
                        group_one++;
                else if (\$3 >= 6 && \$3 <= 15)
                        group_two++;
                else if (\$3 >= 16 && \$3 <= 25)
                        group_three++;
                else if (\$3 >= 26 && \$3 <= 35)
                        group_four++;
                else if (\$3 >= 36 && \$3 <= 45)
                        group_five++;
                else if (\$3 >= 46 && \$3 <= 55)
                        group_six++;
                else if (\$3 >= 56 && \$3 <= 65)
                        group_seven++;
                else if (\$3 >= 66 && \$3 <= 75)
                        group_eight++;
                else if (\$3 >= 76 && \$3 <= 85)
                        group_nine++;
                else if (\$3 >= 86 && \$3 <= 95)
                        group_ten++;
                else if (\$3 >= 96 && \$3 <= 105)
                        group_eleven++;
                else if (\$3 > 105)
                        group_twelve++;
                else
                        group_none++;
}
END \
{
        printf \"0-5 %2s: %d\n\", \" \", group_one;
        printf \"6-15 %s: %d\n\", \" \", group_two;
        print \"16-25 :\", group_three;
        print \"26-35 :\", group_four;
        print \"36-45 :\", group_five;
        print \"46-55 :\", group_six;
        print \"56-65 :\", group_seven;
        print \"66-75 :\", group_eight;
        print \"76-85 :\", group_nine;
        print \"86-95 :\", group_ten;
        print \"96-105:\", group_eleven;
        printf \">105 %s: %d\n\", \" \", group_twelve;
        printf \"None %s: %d\n\", \" \", group_none;
}
'
"

daily="awk -F ',' '\$2 ~ /^ *[0-9]{4}(-[0-9]{2}){2} *$/ {a[\$2]++} END {for (n in a) {i++; print n \":\", a[n]}}' | sort"

monthly="awk -F ',' '{print \$2}' | awk -F '-' '(\$1\"-\"\$2) ~ /^[0-9]{4}-[0-9]{2}/ {a[\$1\"-\"\$2]++} END {for (n in a) {i++; print n \":\", a[n]}}' | sort"

yearly="awk -F ',' '{print \$2}' | awk -F '-' '\$1 ~ /^[0-9]{4}/ {a[\$1]++} END {for (n in a) {i++; print n \":\", a[n]}}' | sort"

countries="awk -F ',' '\$8 ~ /^..$/ {a[\$8]++} END {for (n in a) {i++; print n \":\", a[n]}}' | sort"

districts="awk -F ',' '\$6 ~ /^.{0,6}$/ {a[\$6]++} END {for (n in a) {i++; if (n == \"\") {print \"None:\", a[n]} else {print n \":\", a[n]}}}' | sort"

regions="awk -F ',' '\$5 ~ /^.{0,5}$/ {a[\$5]++} END {for (n in a) {i++; if (n == \"\") {print \"None:\", a[n]} else {print n \":\", a[n]}}}' | sort"


if [ -n "$COMMAND" ]
then
        if [ -n "$HIST" ]
        then
                eval "($ARG) | $FILTERS | eval $"$COMMAND" | $HIST_F ; $VALID_AGE"
        else
                eval "($ARG) | $FILTERS | eval $"$COMMAND" ; $VALID_AGE"
        fi
else
        eval "($ARG) | $FILTERS ; $VALID_AGE"
fi
